plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

// 获取配置信息
def configs = rootProject.ext.configs
def signings = rootProject.ext.signings
ext {
    isDebug = true
}
android {
    compileSdk configs.compileSdkVersion

    defaultConfig {
        applicationId configs.applicationId
        minSdk configs.minSdkVersion
        targetSdk configs.targetSdkVersion
        versionCode configs.versionCode
        versionName configs.versionName

        // 简单粗暴解决多个库出现 UnsatisfiedLinkError 文件错误问题
        ndk {
            // "x86", "armeabi-v7a", "arm64-v8a"
//            abiFilters "x86"
//            abiFilters "armeabi-v7a"
            abiFilters "arm64-v8a"
//            abiFilters "armeabi-v7a", "arm64-v8a"
        }

        manifestPlaceholders = [
                appChannel    : "develop",
                appVersionName: configs.versionName,
                isDebug       : isDebug
        ]
    }

    // 签名信息
    signingConfigs {
        // 签名信息，因为签名文件是保密信息，放在一个配置文件中进行读取，这个文件不会再版本库里存在
        release {
            keyAlias = signings.keyAlias
            keyPassword = signings.keyPassword
            storeFile = file(signings.storeFile)
            storePassword = signings.storePassword
        }
    }

    // 编译配置
    buildTypes {
        debug {
            // 添加参数表示 debug 环境，这里使用测试环境
            isDebug = true
            // 是否开启压缩
            zipAlignEnabled false
            // 是否开启混淆
            minifyEnabled false
            // Debug 打包签名信息，这里和 release 配置相同方便三方登录与分享调试
            signingConfig signingConfigs.release
        }
        release {
            // 添加参数表示 debug 环境，这里使用测试环境
            isDebug = false
            // 是否开启压缩
            zipAlignEnabled false
            // 是否开启混淆
            minifyEnabled false
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources false
            // 设置正式打包的签名
            signingConfig signingConfigs.release
            // 混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // 修改生成的 apk 名字，格式为:项目-版本-时间-渠道名.apk
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${rootProject.name}V${defaultConfig.versionName}.${getTime()}." + variant.productFlavors[0].name + '.apk'
                }
            }
        }
    }

    // 多渠道打包配置
    flavorDimensions "default"
    productFlavors {
        develop {
            dimension = "default"
            manifestPlaceholders = [
                    appChannel    : "develop",
                    appVersionName: configs.versionName,
                    isDebug       : isDebug
            ]

            // 根据渠道不同加载不同的so库
            ndk {
//                abiFilters "armeabi-v7a"
                abiFilters "arm64-v8a"
//                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
        googlePlay {
            dimension = "default"
            manifestPlaceholders = [
                    appChannel    : "develop",
                    appVersionName: configs.versionName,
                    isDebug       : isDebug
            ]

            // GooglePlay 可以发布aab包，所以不需要单独打支持不同CPU的包
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }

    // 配置 Java 编译版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // 开启 ViewBinding
    buildFeatures {
        viewBinding true
    }
    // 编译忽略错误配置
    lintOptions {
        abortOnError false
    }
    // kotlin 配置
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
    // 阿里巴巴 ARouter Kotlin 下的配置
    kapt {
        arguments {
            // 阿里巴巴 ARouter Kotlin 下的配置
            arg("AROUTER_MODULE_NAME", project.getName())
            // Room 配置
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }
}

dependencies {
    kapt "androidx.room:room-compiler:2.3.0"

    // ARouter 编译器，TODO 当代码中有一些自己没看到的错误的时候，ARouter 会拦截错误信息，看不到错误位置，把这行注释掉，重新编译
    kapt 'com.alibaba:arouter-compiler:1.5.2'

    // 依赖 ads 库
    implementation project(':vmads')
    // 依赖 base 库
    implementation project(':vmbase')
    // 依赖 common 库
    implementation project(':vmcommon')
    // 依赖 db 库
    implementation project(':vmdb')
    // 依赖 im 库
    implementation project(':vmim')
    // 依赖 mqtt 库
    implementation project(':vmmqtt')
    // 依赖 image 库
    implementation project(':vmimage')
    // 依赖 pay 库
    implementation project(':vmpay')
    // 依赖 push 库
    implementation project(':vmpush')
    // 依赖 qr 库
    implementation project(':vmqr')
    // 依赖 report 库
    implementation project(':vmreport')
    // 依赖 request 库
    implementation project(':vmrequest')
}

// 获取当前系统时间
def getTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))
}