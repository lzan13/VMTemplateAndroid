plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

// 获取配置信息
def configs = rootProject.ext.configs

android {
    compileSdk configs.compileSdkVersion

    defaultConfig {
        minSdk configs.minSdkVersion
        targetSdk configs.targetSdkVersion

        // 通过配置文件设置请求 API 地址
        buildConfigField("String", "baseDebugUrl", configs.baseDebugUrl)
        buildConfigField("String", "baseReleaseUrl", configs.baseReleaseUrl)
        // 资源文件 url 地址
        buildConfigField("String", "mediaUrl", configs.mediaUrl)
    }

    buildTypes {
        release {
            minifyEnabled false
            // 配置 Java 编译版本
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }
    }
    // 配置 Java 编译版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    // 开启 ViewBinding
    buildFeatures {
        viewBinding true
    }

    // 编译忽略错误配置
    lintOptions {
        abortOnError false
    }
    // kotlin 配置
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
    kapt {
        arguments {
            // Room 配置
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }
}

dependencies {
    // 数据库在哪里实现，这个就要加在哪里
    kapt "androidx.room:room-compiler:2.3.0"

    // 依赖 base 库
    implementation project(':vmbase')
    // 依赖 common 库
    implementation project(':vmcommon')
    // 依赖 db 库
    implementation project(':vmdb')
    // 依赖 pay 库
    implementation project(':vmpay')
    // 依赖 qr 库
    implementation project(':vmqr')
    // 依赖 request 库
    implementation project(':vmrequest')
}
